
ESD Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe4  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800216c  0800216c  0000a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002188  08002188  0000a188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800218c  0800218c  0000a18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000000  08002190  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000cc  2000002c  2000002c  0001002c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000f8  200000f8  0001002c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008c7b  00000000  00000000  0001005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018b3  00000000  00000000  00018cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b08  00000000  00000000  0001a590  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  0001b098  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000036c5  00000000  00000000  0001ba98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000377c  00000000  00000000  0001f15d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000082  00000000  00000000  000228d9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002328  00000000  00000000  0002295c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002154 	.word	0x08002154

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002154 	.word	0x08002154
 80001c4:	20000030 	.word	0x20000030

080001c8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
	int div = 1;
 80001d4:	2301      	movs	r3, #1
 80001d6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80001d8:	e004      	b.n	80001e4 <ts_itoa+0x1c>
		div *= base;
 80001da:	697b      	ldr	r3, [r7, #20]
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	fb02 f303 	mul.w	r3, r2, r3
 80001e2:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 80001e4:	697b      	ldr	r3, [r7, #20]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d2f3      	bcs.n	80001da <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 80001f2:	e029      	b.n	8000248 <ts_itoa+0x80>
	{
		int num = d/div;
 80001f4:	697b      	ldr	r3, [r7, #20]
 80001f6:	68ba      	ldr	r2, [r7, #8]
 80001f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80001fc:	613b      	str	r3, [r7, #16]
		d = d%div;
 80001fe:	697a      	ldr	r2, [r7, #20]
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	fbb3 f1f2 	udiv	r1, r3, r2
 8000206:	fb02 f201 	mul.w	r2, r2, r1
 800020a:	1a9b      	subs	r3, r3, r2
 800020c:	60bb      	str	r3, [r7, #8]
		div /= base;
 800020e:	697a      	ldr	r2, [r7, #20]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	fb92 f3f3 	sdiv	r3, r2, r3
 8000216:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	2b09      	cmp	r3, #9
 800021c:	dd0a      	ble.n	8000234 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	1c59      	adds	r1, r3, #1
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	6011      	str	r1, [r2, #0]
 8000228:	693a      	ldr	r2, [r7, #16]
 800022a:	b2d2      	uxtb	r2, r2
 800022c:	3237      	adds	r2, #55	; 0x37
 800022e:	b2d2      	uxtb	r2, r2
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	e009      	b.n	8000248 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	1c59      	adds	r1, r3, #1
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	6011      	str	r1, [r2, #0]
 800023e:	693a      	ldr	r2, [r7, #16]
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	3230      	adds	r2, #48	; 0x30
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d1d2      	bne.n	80001f4 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800024e:	371c      	adds	r7, #28
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000268:	e07f      	b.n	800036a <ts_formatstring+0x112>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b25      	cmp	r3, #37	; 0x25
 8000270:	d173      	bne.n	800035a <ts_formatstring+0x102>
		{
			switch (*(++fmt))
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	3301      	adds	r3, #1
 8000276:	60bb      	str	r3, [r7, #8]
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b64      	cmp	r3, #100	; 0x64
 800027e:	d01e      	beq.n	80002be <ts_formatstring+0x66>
 8000280:	2b64      	cmp	r3, #100	; 0x64
 8000282:	dc06      	bgt.n	8000292 <ts_formatstring+0x3a>
 8000284:	2b58      	cmp	r3, #88	; 0x58
 8000286:	d052      	beq.n	800032e <ts_formatstring+0xd6>
 8000288:	2b63      	cmp	r3, #99	; 0x63
 800028a:	d00e      	beq.n	80002aa <ts_formatstring+0x52>
 800028c:	2b25      	cmp	r3, #37	; 0x25
 800028e:	d05a      	beq.n	8000346 <ts_formatstring+0xee>
 8000290:	e05f      	b.n	8000352 <ts_formatstring+0xfa>
 8000292:	2b73      	cmp	r3, #115	; 0x73
 8000294:	d02c      	beq.n	80002f0 <ts_formatstring+0x98>
 8000296:	2b73      	cmp	r3, #115	; 0x73
 8000298:	dc02      	bgt.n	80002a0 <ts_formatstring+0x48>
 800029a:	2b69      	cmp	r3, #105	; 0x69
 800029c:	d00f      	beq.n	80002be <ts_formatstring+0x66>
 800029e:	e058      	b.n	8000352 <ts_formatstring+0xfa>
 80002a0:	2b75      	cmp	r3, #117	; 0x75
 80002a2:	d038      	beq.n	8000316 <ts_formatstring+0xbe>
 80002a4:	2b78      	cmp	r3, #120	; 0x78
 80002a6:	d042      	beq.n	800032e <ts_formatstring+0xd6>
 80002a8:	e053      	b.n	8000352 <ts_formatstring+0xfa>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	1c5a      	adds	r2, r3, #1
 80002ae:	60fa      	str	r2, [r7, #12]
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	1d11      	adds	r1, r2, #4
 80002b4:	6079      	str	r1, [r7, #4]
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	b2d2      	uxtb	r2, r2
 80002ba:	701a      	strb	r2, [r3, #0]
				break;
 80002bc:	e049      	b.n	8000352 <ts_formatstring+0xfa>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	1d1a      	adds	r2, r3, #4
 80002c2:	607a      	str	r2, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	da07      	bge.n	80002de <ts_formatstring+0x86>
					{
						val *= -1;
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	425b      	negs	r3, r3
 80002d2:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	1c5a      	adds	r2, r3, #1
 80002d8:	60fa      	str	r2, [r7, #12]
 80002da:	222d      	movs	r2, #45	; 0x2d
 80002dc:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	f107 020c 	add.w	r2, r7, #12
 80002e4:	4610      	mov	r0, r2
 80002e6:	4619      	mov	r1, r3
 80002e8:	220a      	movs	r2, #10
 80002ea:	f7ff ff6d 	bl	80001c8 <ts_itoa>
				}
				break;
 80002ee:	e030      	b.n	8000352 <ts_formatstring+0xfa>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	1d1a      	adds	r2, r3, #4
 80002f4:	607a      	str	r2, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80002fa:	e007      	b.n	800030c <ts_formatstring+0xb4>
					{
						*buf++ = *arg++;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	60fa      	str	r2, [r7, #12]
 8000302:	69ba      	ldr	r2, [r7, #24]
 8000304:	1c51      	adds	r1, r2, #1
 8000306:	61b9      	str	r1, [r7, #24]
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 800030c:	69bb      	ldr	r3, [r7, #24]
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1f3      	bne.n	80002fc <ts_formatstring+0xa4>
					{
						*buf++ = *arg++;
					}
				}
				break;
 8000314:	e01d      	b.n	8000352 <ts_formatstring+0xfa>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	1d1a      	adds	r2, r3, #4
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f107 020c 	add.w	r2, r7, #12
 8000322:	4610      	mov	r0, r2
 8000324:	4619      	mov	r1, r3
 8000326:	220a      	movs	r2, #10
 8000328:	f7ff ff4e 	bl	80001c8 <ts_itoa>
				break;
 800032c:	e011      	b.n	8000352 <ts_formatstring+0xfa>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	1d1a      	adds	r2, r3, #4
 8000332:	607a      	str	r2, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f107 020c 	add.w	r2, r7, #12
 800033a:	4610      	mov	r0, r2
 800033c:	4619      	mov	r1, r3
 800033e:	2210      	movs	r2, #16
 8000340:	f7ff ff42 	bl	80001c8 <ts_itoa>
				break;
 8000344:	e005      	b.n	8000352 <ts_formatstring+0xfa>
			  case '%':
				  *buf++ = '%';
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	60fa      	str	r2, [r7, #12]
 800034c:	2225      	movs	r2, #37	; 0x25
 800034e:	701a      	strb	r2, [r3, #0]
				  break;
 8000350:	bf00      	nop
			}
			fmt++;
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	3301      	adds	r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	e007      	b.n	800036a <ts_formatstring+0x112>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	1c5a      	adds	r2, r3, #1
 800035e:	60fa      	str	r2, [r7, #12]
 8000360:	68ba      	ldr	r2, [r7, #8]
 8000362:	1c51      	adds	r1, r2, #1
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	7812      	ldrb	r2, [r2, #0]
 8000368:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	f47f af7b 	bne.w	800026a <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	461a      	mov	r2, r3
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	1ad3      	subs	r3, r2, r3
}
 8000382:	4618      	mov	r0, r3
 8000384:	3720      	adds	r7, #32
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop

0800038c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800038c:	b40e      	push	{r1, r2, r3}
 800038e:	b580      	push	{r7, lr}
 8000390:	b085      	sub	sp, #20
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8000396:	f107 0320 	add.w	r3, r7, #32
 800039a:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	69f9      	ldr	r1, [r7, #28]
 80003a0:	68ba      	ldr	r2, [r7, #8]
 80003a2:	f7ff ff59 	bl	8000258 <ts_formatstring>
 80003a6:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80003a8:	68fb      	ldr	r3, [r7, #12]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003b4:	b003      	add	sp, #12
 80003b6:	4770      	bx	lr

080003b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <SystemInit+0x5c>)
 80003be:	4a15      	ldr	r2, [pc, #84]	; (8000414 <SystemInit+0x5c>)
 80003c0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80003c4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80003c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <SystemInit+0x60>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <SystemInit+0x60>)
 80003d0:	6812      	ldr	r2, [r2, #0]
 80003d2:	f042 0201 	orr.w	r2, r2, #1
 80003d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <SystemInit+0x60>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <SystemInit+0x60>)
 80003e0:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <SystemInit+0x60>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <SystemInit+0x60>)
 80003f0:	4a0a      	ldr	r2, [pc, #40]	; (800041c <SystemInit+0x64>)
 80003f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <SystemInit+0x60>)
 80003f6:	4a08      	ldr	r2, [pc, #32]	; (8000418 <SystemInit+0x60>)
 80003f8:	6812      	ldr	r2, [r2, #0]
 80003fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80003fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <SystemInit+0x60>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000406:	f000 f80b 	bl	8000420 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800040a:	4b02      	ldr	r3, [pc, #8]	; (8000414 <SystemInit+0x5c>)
 800040c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000410:	609a      	str	r2, [r3, #8]
#endif
}
 8000412:	bd80      	pop	{r7, pc}
 8000414:	e000ed00 	.word	0xe000ed00
 8000418:	40023800 	.word	0x40023800
 800041c:	24003010 	.word	0x24003010

08000420 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	2300      	movs	r3, #0
 800042c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800042e:	4b35      	ldr	r3, [pc, #212]	; (8000504 <SetSysClock+0xe4>)
 8000430:	4a34      	ldr	r2, [pc, #208]	; (8000504 <SetSysClock+0xe4>)
 8000432:	6812      	ldr	r2, [r2, #0]
 8000434:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000438:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800043a:	4b32      	ldr	r3, [pc, #200]	; (8000504 <SetSysClock+0xe4>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000442:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3301      	adds	r3, #1
 8000448:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d103      	bne.n	8000458 <SetSysClock+0x38>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000456:	d1f0      	bne.n	800043a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000458:	4b2a      	ldr	r3, [pc, #168]	; (8000504 <SetSysClock+0xe4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d002      	beq.n	800046a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000464:	2301      	movs	r3, #1
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	e001      	b.n	800046e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800046a:	2300      	movs	r3, #0
 800046c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d142      	bne.n	80004fa <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000474:	4b23      	ldr	r3, [pc, #140]	; (8000504 <SetSysClock+0xe4>)
 8000476:	4a23      	ldr	r2, [pc, #140]	; (8000504 <SetSysClock+0xe4>)
 8000478:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800047a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800047e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <SetSysClock+0xe8>)
 8000482:	4a21      	ldr	r2, [pc, #132]	; (8000508 <SetSysClock+0xe8>)
 8000484:	6812      	ldr	r2, [r2, #0]
 8000486:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800048a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <SetSysClock+0xe4>)
 800048e:	4a1d      	ldr	r2, [pc, #116]	; (8000504 <SetSysClock+0xe4>)
 8000490:	6892      	ldr	r2, [r2, #8]
 8000492:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <SetSysClock+0xe4>)
 8000496:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <SetSysClock+0xe4>)
 8000498:	6892      	ldr	r2, [r2, #8]
 800049a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800049e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <SetSysClock+0xe4>)
 80004a2:	4a18      	ldr	r2, [pc, #96]	; (8000504 <SetSysClock+0xe4>)
 80004a4:	6892      	ldr	r2, [r2, #8]
 80004a6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80004aa:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <SetSysClock+0xe4>)
 80004ae:	4a17      	ldr	r2, [pc, #92]	; (800050c <SetSysClock+0xec>)
 80004b0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <SetSysClock+0xe4>)
 80004b4:	4a13      	ldr	r2, [pc, #76]	; (8000504 <SetSysClock+0xe4>)
 80004b6:	6812      	ldr	r2, [r2, #0]
 80004b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80004bc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80004be:	bf00      	nop
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <SetSysClock+0xe4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d0f9      	beq.n	80004c0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80004cc:	4b10      	ldr	r3, [pc, #64]	; (8000510 <SetSysClock+0xf0>)
 80004ce:	f240 6205 	movw	r2, #1541	; 0x605
 80004d2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <SetSysClock+0xe4>)
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <SetSysClock+0xe4>)
 80004d8:	6892      	ldr	r2, [r2, #8]
 80004da:	f022 0203 	bic.w	r2, r2, #3
 80004de:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <SetSysClock+0xe4>)
 80004e2:	4a08      	ldr	r2, [pc, #32]	; (8000504 <SetSysClock+0xe4>)
 80004e4:	6892      	ldr	r2, [r2, #8]
 80004e6:	f042 0202 	orr.w	r2, r2, #2
 80004ea:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004ec:	bf00      	nop
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <SetSysClock+0xe4>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	f003 030c 	and.w	r3, r3, #12
 80004f6:	2b08      	cmp	r3, #8
 80004f8:	d1f9      	bne.n	80004ee <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	40023800 	.word	0x40023800
 8000508:	40007000 	.word	0x40007000
 800050c:	07405408 	.word	0x07405408
 8000510:	40023c00 	.word	0x40023c00

08000514 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
}
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000524:	e7fe      	b.n	8000524 <HardFault_Handler+0x4>
 8000526:	bf00      	nop

08000528 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800052c:	e7fe      	b.n	800052c <MemManage_Handler+0x4>
 800052e:	bf00      	nop

08000530 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000534:	e7fe      	b.n	8000534 <BusFault_Handler+0x4>
 8000536:	bf00      	nop

08000538 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800053c:	e7fe      	b.n	800053c <UsageFault_Handler+0x4>
 800053e:	bf00      	nop

08000540 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
}
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
}
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
}
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000570:	f8df d03c 	ldr.w	sp, [pc, #60]	; 80005b0 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000574:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000576:	f000 b804 	b.w	8000582 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 800057c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800057e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000580:	3104      	adds	r1, #4

08000582 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000582:	480d      	ldr	r0, [pc, #52]	; (80005b8 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000586:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000588:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800058a:	f4ff aff6 	bcc.w	800057a <CopyDataInit>
  ldr  r2, =_sbss
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000590:	f000 b803 	b.w	800059a <LoopFillZerobss>

08000594 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000594:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000596:	f842 3b04 	str.w	r3, [r2], #4

0800059a <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 800059c:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800059e:	f4ff aff9 	bcc.w	8000594 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005a2:	f7ff ff09 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005a6:	f001 fdaf 	bl	8002108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005aa:	f000 f88b 	bl	80006c4 <main>
  bx  lr    
 80005ae:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80005b4:	08002190 	.word	0x08002190
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005bc:	2000002c 	.word	0x2000002c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80005c0:	2000002c 	.word	0x2000002c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005c4:	200000f8 	.word	0x200000f8

080005c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005c8:	f7ff bffe 	b.w	80005c8 <ADC_IRQHandler>

080005cc <ConfigureUsart>:
void ClearCommand();
void Delay(int nCount);
void ConfigureUsart(int baudrate);
void USART1_IRQHandler(void);
//Configures the USART using pin B6 as TX and B7 as RX and the passed in baudrate
void ConfigureUsart(int baudrate){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStructure;

	//enable the clocks for the GPIOB and the USART
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80005d4:	2010      	movs	r0, #16
 80005d6:	2101      	movs	r1, #1
 80005d8:	f001 fa2c 	bl	8001a34 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80005dc:	2002      	movs	r0, #2
 80005de:	2101      	movs	r1, #1
 80005e0:	f001 fa0a 	bl	80019f8 <RCC_AHB1PeriphClockCmd>

	//Initialise pins GPIOB 6 and GPIOB 7
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80005e4:	23c0      	movs	r3, #192	; 0xc0
 80005e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; //we are setting the pin to be alternative function
 80005e8:	2302      	movs	r3, #2
 80005ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80005ee:	2302      	movs	r3, #2
 80005f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	481c      	ldr	r0, [pc, #112]	; (8000678 <ConfigureUsart+0xac>)
 8000606:	4619      	mov	r1, r3
 8000608:	f001 fb24 	bl	8001c54 <GPIO_Init>

	//Connect the TX and RX pins to their alternate function pins
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1); //
 800060c:	481a      	ldr	r0, [pc, #104]	; (8000678 <ConfigureUsart+0xac>)
 800060e:	2106      	movs	r1, #6
 8000610:	2207      	movs	r2, #7
 8000612:	f001 fbc7 	bl	8001da4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8000616:	4818      	ldr	r0, [pc, #96]	; (8000678 <ConfigureUsart+0xac>)
 8000618:	2107      	movs	r1, #7
 800061a:	2207      	movs	r2, #7
 800061c:	f001 fbc2 	bl	8001da4 <GPIO_PinAFConfig>

	//configure USART
	USART_InitStruct.USART_BaudRate = baudrate;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000624:	2300      	movs	r3, #0
 8000626:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000628:	2300      	movs	r3, #0
 800062a:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 800062c:	2300      	movs	r3, #0
 800062e:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000630:	2300      	movs	r3, #0
 8000632:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; //enable send and receive (Tx and Rx)
 8000634:	230c      	movs	r3, #12
 8000636:	837b      	strh	r3, [r7, #26]
	USART_Init(USART1, &USART_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	480f      	ldr	r0, [pc, #60]	; (800067c <ConfigureUsart+0xb0>)
 800063e:	4619      	mov	r1, r3
 8000640:	f000 ff7a 	bl	8001538 <USART_Init>

	//Enable the interupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <ConfigureUsart+0xb0>)
 8000646:	f240 5125 	movw	r1, #1317	; 0x525
 800064a:	2201      	movs	r2, #1
 800064c:	f001 f860 	bl	8001710 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8000650:	2325      	movs	r3, #37	; 0x25
 8000652:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800065c:	2301      	movs	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fcf1 	bl	800204c <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART1, ENABLE);
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <ConfigureUsart+0xb0>)
 800066c:	2101      	movs	r1, #1
 800066e:	f001 f81d 	bl	80016ac <USART_Cmd>
}
 8000672:	3728      	adds	r7, #40	; 0x28
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40020400 	.word	0x40020400
 800067c:	40011000 	.word	0x40011000

08000680 <SendData>:

//writes out a string to the passed in usart. The string is passed as a pointer
void SendData(USART_TypeDef* USARTx, volatile char *s){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]

	while(*s){
 800068a:	e012      	b.n	80006b2 <SendData+0x32>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
 800068c:	bf00      	nop
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b29b      	uxth	r3, r3
 8000694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0f8      	beq.n	800068e <SendData+0xe>
		USART_SendData(USARTx, *s);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f001 f821 	bl	80016ec <USART_SendData>
		*s++;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	603a      	str	r2, [r7, #0]
 80006b0:	781b      	ldrb	r3, [r3, #0]
}

//writes out a string to the passed in usart. The string is passed as a pointer
void SendData(USART_TypeDef* USARTx, volatile char *s){

	while(*s){
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1e7      	bne.n	800068c <SendData+0xc>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
		USART_SendData(USARTx, *s);
		*s++;
	}
}
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop

080006c4 <main>:


int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0ae      	sub	sp, #184	; 0xb8
 80006c8:	af04      	add	r7, sp, #16

	/* Init pins PD12, 13, 14, 15 */
	TM_GPIO_Init(GPIOE, GPIO_Pin_8 | GPIO_Pin_9, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_GPIO_PuPd_DOWN, TM_GPIO_Speed_High);
 80006ca:	2302      	movs	r3, #2
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2303      	movs	r3, #3
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4845      	ldr	r0, [pc, #276]	; (80007e8 <main+0x124>)
 80006d4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80006d8:	2200      	movs	r2, #0
 80006da:	2300      	movs	r3, #0
 80006dc:	f000 fe1e 	bl	800131c <TM_GPIO_Init>
	int p1,p2;
	long long int i =0;
 80006e0:	f04f 0200 	mov.w	r2, #0
 80006e4:	f04f 0300 	mov.w	r3, #0
 80006e8:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	}
	*/
  /* TODO - Add your application code here */
	TM_MPU6050_t MPU6050_Data0;
	uint8_t sensor1 = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	char str[120];
	ConfigureUsart(9600); // setup usart 1 with a baudrate of 9600
 80006f2:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80006f6:	f7ff ff69 	bl	80005cc <ConfigureUsart>
	SendData(USART1,"AT+BAUD8");
 80006fa:	483c      	ldr	r0, [pc, #240]	; (80007ec <main+0x128>)
 80006fc:	493c      	ldr	r1, [pc, #240]	; (80007f0 <main+0x12c>)
 80006fe:	f7ff ffbf 	bl	8000680 <SendData>
	Delay(900000);
 8000702:	483c      	ldr	r0, [pc, #240]	; (80007f4 <main+0x130>)
 8000704:	f000 f8da 	bl	80008bc <Delay>
	ConfigureUsart(115200); // setup usart 1 with a baudrate of 9600
 8000708:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800070c:	f7ff ff5e 	bl	80005cc <ConfigureUsart>

	Delay(900000);
 8000710:	4838      	ldr	r0, [pc, #224]	; (80007f4 <main+0x130>)
 8000712:	f000 f8d3 	bl	80008bc <Delay>
	/* Initialize MPU6050 sensor 0, address = 0xD0, AD0 pin on sensor is low */
	if (TM_MPU6050_Init(&MPU6050_Data0, TM_MPU6050_Device_0, TM_MPU6050_Accelerometer_2G, TM_MPU6050_Gyroscope_2000s) == TM_MPU6050_Result_Ok) {
 8000716:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800071a:	4618      	mov	r0, r3
 800071c:	2100      	movs	r1, #0
 800071e:	2200      	movs	r2, #0
 8000720:	2303      	movs	r3, #3
 8000722:	f000 f999 	bl	8000a58 <TM_MPU6050_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d102      	bne.n	8000732 <main+0x6e>
		sensor1 = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97


  /* Infinite loop */
  while (1)
  {
	  if (sensor1) {
 8000732:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000736:	2b00      	cmp	r3, #0
 8000738:	d054      	beq.n	80007e4 <main+0x120>
	  				/* Read all data from sensor 1 */
	  				TM_MPU6050_ReadAll(&MPU6050_Data0);
 800073a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fa44 	bl	8000bcc <TM_MPU6050_ReadAll>
	  				if (GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_8)==1){
 8000744:	4828      	ldr	r0, [pc, #160]	; (80007e8 <main+0x124>)
 8000746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074a:	f001 fb11 	bl	8001d70 <GPIO_ReadInputDataBit>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d103      	bne.n	800075c <main+0x98>
	  							p1 = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800075a:	e002      	b.n	8000762 <main+0x9e>
	  						}else{
	  						p1 = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  						}


	  						if (GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_9)==1){
 8000762:	4821      	ldr	r0, [pc, #132]	; (80007e8 <main+0x124>)
 8000764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000768:	f001 fb02 	bl	8001d70 <GPIO_ReadInputDataBit>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d103      	bne.n	800077a <main+0xb6>
	  							p2 = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000778:	e002      	b.n	8000780 <main+0xbc>
	  						}else{
	  						p2 = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  					  					//MPU6050_Data0.Accelerometer_X,
	  					  					//MPU6050_Data0.Accelerometer_Y,
	  					  					//MPU6050_Data0.Accelerometer_Z,
	  					  					p1,
	  					  					p2,
	  					  					MPU6050_Data0.Gyroscope_X,
 8000780:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
	  					MPU6050_Data0.Gyroscope_X,
	  					MPU6050_Data0.Gyroscope_Y,
	  					MPU6050_Data0.Gyroscope_Z,
	  					MPU6050_Data0.Temperature
	  				);*/
	  				sprintf(str, "%d,%d,%d,%d,%d\n",
 8000784:	b218      	sxth	r0, r3
	  					  					//MPU6050_Data0.Accelerometer_Y,
	  					  					//MPU6050_Data0.Accelerometer_Z,
	  					  					p1,
	  					  					p2,
	  					  					MPU6050_Data0.Gyroscope_X,
	  					  					MPU6050_Data0.Gyroscope_Y,
 8000786:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
	  					MPU6050_Data0.Gyroscope_X,
	  					MPU6050_Data0.Gyroscope_Y,
	  					MPU6050_Data0.Gyroscope_Z,
	  					MPU6050_Data0.Temperature
	  				);*/
	  				sprintf(str, "%d,%d,%d,%d,%d\n",
 800078a:	b219      	sxth	r1, r3
	  					  					p1,
	  					  					p2,
	  					  					MPU6050_Data0.Gyroscope_X,
	  					  					MPU6050_Data0.Gyroscope_Y,

	  					  					MPU6050_Data0.Gyroscope_Z
 800078c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
	  					MPU6050_Data0.Gyroscope_X,
	  					MPU6050_Data0.Gyroscope_Y,
	  					MPU6050_Data0.Gyroscope_Z,
	  					MPU6050_Data0.Temperature
	  				);*/
	  				sprintf(str, "%d,%d,%d,%d,%d\n",
 8000790:	b21a      	sxth	r2, r3
 8000792:	463b      	mov	r3, r7
 8000794:	9000      	str	r0, [sp, #0]
 8000796:	9101      	str	r1, [sp, #4]
 8000798:	9202      	str	r2, [sp, #8]
 800079a:	4618      	mov	r0, r3
 800079c:	4916      	ldr	r1, [pc, #88]	; (80007f8 <main+0x134>)
 800079e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80007a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80007a6:	f7ff fdf1 	bl	800038c <siprintf>
	  					  					MPU6050_Data0.Gyroscope_Y,

	  					  					MPU6050_Data0.Gyroscope_Z

	  					  				);
	  				SendData(USART1, str);
 80007aa:	463b      	mov	r3, r7
 80007ac:	480f      	ldr	r0, [pc, #60]	; (80007ec <main+0x128>)
 80007ae:	4619      	mov	r1, r3
 80007b0:	f7ff ff66 	bl	8000680 <SendData>
	  				for(i=0;i<18300;i++);
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80007c0:	e006      	b.n	80007d0 <main+0x10c>
 80007c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80007c6:	3201      	adds	r2, #1
 80007c8:	f143 0300 	adc.w	r3, r3, #0
 80007cc:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80007d0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80007d4:	f244 707b 	movw	r0, #18299	; 0x477b
 80007d8:	f04f 0100 	mov.w	r1, #0
 80007dc:	4290      	cmp	r0, r2
 80007de:	eb71 0c03 	sbcs.w	ip, r1, r3
 80007e2:	daee      	bge.n	80007c2 <main+0xfe>

	  	  }

}
 80007e4:	e7a5      	b.n	8000732 <main+0x6e>
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40011000 	.word	0x40011000
 80007f0:	0800216c 	.word	0x0800216c
 80007f4:	000dbba0 	.word	0x000dbba0
 80007f8:	08002178 	.word	0x08002178

080007fc <USART1_IRQHandler>:
//and checks to see if it received the enter key (ascii code 13) or if the total number of characters received is greater
//that the buffer size.
//Note that there is no reference to this method in our setup code, this is because the name of this method is defined in the
//startup_stm32f4xx.S (you can find this in the startup_src folder). When listening for interrupts from USART 2 or 3 you would
//define methods named USART2_IRQHandler or USART3_IRQHandler
void USART1_IRQHandler(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	//check the type of interrupt to make sure we have received some data.
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){
 8000802:	4816      	ldr	r0, [pc, #88]	; (800085c <USART1_IRQHandler+0x60>)
 8000804:	f240 5125 	movw	r1, #1317	; 0x525
 8000808:	f000 ffca 	bl	80017a0 <USART_GetITStatus>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d021      	beq.n	8000856 <USART1_IRQHandler+0x5a>
		char t = USART1->DR; //Read the character that we have received
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <USART1_IRQHandler+0x60>)
 8000814:	889b      	ldrh	r3, [r3, #4]
 8000816:	b29b      	uxth	r3, r3
 8000818:	71fb      	strb	r3, [r7, #7]

		if( (DataReceivedCounter < BUFFER_SIZE) && t != 13 ){
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <USART1_IRQHandler+0x64>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b0f      	cmp	r3, #15
 8000820:	d80e      	bhi.n	8000840 <USART1_IRQHandler+0x44>
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b0d      	cmp	r3, #13
 8000826:	d00b      	beq.n	8000840 <USART1_IRQHandler+0x44>
			received_buffer[DataReceivedCounter] = t;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <USART1_IRQHandler+0x64>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <USART1_IRQHandler+0x68>)
 800082e:	79f9      	ldrb	r1, [r7, #7]
 8000830:	54d1      	strb	r1, [r2, r3]
			DataReceivedCounter++;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <USART1_IRQHandler+0x64>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <USART1_IRQHandler+0x64>)
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e00a      	b.n	8000856 <USART1_IRQHandler+0x5a>
		}
		else{ // otherwise reset the character counter and print the received string
			DataReceivedCounter = 0;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <USART1_IRQHandler+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
			//only raise a command event if the enter key was pressed otherwise just clear
			if(t == 13){
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b0d      	cmp	r3, #13
 800084a:	d102      	bne.n	8000852 <USART1_IRQHandler+0x56>
				USARTCommandReceived(received_buffer);
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <USART1_IRQHandler+0x68>)
 800084e:	f000 f80b 	bl	8000868 <USARTCommandReceived>
			}

			ClearCommand();
 8000852:	f000 f819 	bl	8000888 <ClearCommand>

		}
	}
}
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40011000 	.word	0x40011000
 8000860:	20000048 	.word	0x20000048
 8000864:	20000068 	.word	0x20000068

08000868 <USARTCommandReceived>:

//this method is called when a command is received from the USART, a command is only received when enter
//is pressed, if the buffer length is exceeded the buffer is cleared without raising a command
void USARTCommandReceived(char * command){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	SendData(USART1, received_buffer);
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <USARTCommandReceived+0x18>)
 8000872:	4904      	ldr	r1, [pc, #16]	; (8000884 <USARTCommandReceived+0x1c>)
 8000874:	f7ff ff04 	bl	8000680 <SendData>

	}
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40011000 	.word	0x40011000
 8000884:	20000068 	.word	0x20000068

08000888 <ClearCommand>:

void ClearCommand(){
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
	int i =0;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
	for(i=0;i < BUFFER_SIZE; i++){
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e007      	b.n	80008a8 <ClearCommand+0x20>
		received_buffer[i] = 0;
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <ClearCommand+0x30>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]

	}

void ClearCommand(){
	int i =0;
	for(i=0;i < BUFFER_SIZE; i++){
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b0f      	cmp	r3, #15
 80008ac:	ddf4      	ble.n	8000898 <ClearCommand+0x10>
		received_buffer[i] = 0;
	}

}
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	20000068 	.word	0x20000068

080008bc <Delay>:

void Delay(int nCount) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  while(nCount--) {
 80008c4:	bf00      	nop
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1fa      	bne.n	80008c6 <Delay+0xa>
  }
}
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <EVAL_AUDIO_TransferComplete_CallBack>:

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80008e6:	bf00      	nop
}
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 80008f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800090c:	4b37      	ldr	r3, [pc, #220]	; (80009ec <Audio_MAL_IRQHandler+0xe4>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <Audio_MAL_IRQHandler+0xe8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4610      	mov	r0, r2
 8000916:	4619      	mov	r1, r3
 8000918:	f001 fb14 	bl	8001f44 <DMA_GetFlagStatus>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d062      	beq.n	80009e8 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000922:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <Audio_MAL_IRQHandler+0xec>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d04a      	beq.n	80009c0 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800092a:	bf00      	nop
 800092c:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <Audio_MAL_IRQHandler+0xe4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f001 faef 	bl	8001f14 <DMA_GetCmdStatus>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1f7      	bne.n	800092c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <Audio_MAL_IRQHandler+0xe4>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <Audio_MAL_IRQHandler+0xe8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4610      	mov	r0, r2
 8000946:	4619      	mov	r1, r3
 8000948:	f001 fb38 	bl	8001fbc <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800094c:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <Audio_MAL_IRQHandler+0xf0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <Audio_MAL_IRQHandler+0xf4>)
 8000954:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <Audio_MAL_IRQHandler+0xec>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095e:	429a      	cmp	r2, r3
 8000960:	bf28      	it	cs
 8000962:	461a      	movcs	r2, r3
 8000964:	4b25      	ldr	r3, [pc, #148]	; (80009fc <Audio_MAL_IRQHandler+0xf4>)
 8000966:	611a      	str	r2, [r3, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <Audio_MAL_IRQHandler+0xe4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	4923      	ldr	r1, [pc, #140]	; (80009fc <Audio_MAL_IRQHandler+0xf4>)
 8000970:	f001 fa5e 	bl	8001e30 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <Audio_MAL_IRQHandler+0xe4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	2101      	movs	r1, #1
 800097c:	f001 faae 	bl	8001edc <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <Audio_MAL_IRQHandler+0xf0>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <Audio_MAL_IRQHandler+0xec>)
 8000986:	6819      	ldr	r1, [r3, #0]
 8000988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098c:	4299      	cmp	r1, r3
 800098e:	bf38      	it	cc
 8000990:	460b      	movcc	r3, r1
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	441a      	add	r2, r3
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <Audio_MAL_IRQHandler+0xf0>)
 8000998:	601a      	str	r2, [r3, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <Audio_MAL_IRQHandler+0xec>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <Audio_MAL_IRQHandler+0xec>)
 80009a0:	6819      	ldr	r1, [r3, #0]
 80009a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a6:	4299      	cmp	r1, r3
 80009a8:	bf38      	it	cc
 80009aa:	460b      	movcc	r3, r1
 80009ac:	1ad2      	subs	r2, r2, r3
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <Audio_MAL_IRQHandler+0xec>)
 80009b0:	601a      	str	r2, [r3, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <Audio_MAL_IRQHandler+0xe4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	2101      	movs	r1, #1
 80009ba:	f001 fa8f 	bl	8001edc <DMA_Cmd>
 80009be:	e013      	b.n	80009e8 <Audio_MAL_IRQHandler+0xe0>
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <Audio_MAL_IRQHandler+0xe4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f001 fa88 	bl	8001edc <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <Audio_MAL_IRQHandler+0xe4>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <Audio_MAL_IRQHandler+0xe8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4610      	mov	r0, r2
 80009d6:	4619      	mov	r1, r3
 80009d8:	f001 faf0 	bl	8001fbc <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <Audio_MAL_IRQHandler+0xf0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f7ff ff7a 	bl	80008dc <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	2000000c 	.word	0x2000000c
 80009f4:	20000000 	.word	0x20000000
 80009f8:	2000007c 	.word	0x2000007c
 80009fc:	200000bc 	.word	0x200000bc

08000a00 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000a04:	f7ff ff80 	bl	8000908 <Audio_MAL_IRQHandler>
}
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop

08000a0c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000a10:	f7ff ff7a 	bl	8000908 <Audio_MAL_IRQHandler>
}
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop

08000a18 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <SPI3_IRQHandler+0x38>)
 8000a1e:	2102      	movs	r1, #2
 8000a20:	f000 ff24 	bl	800186c <SPI_I2S_GetFlagStatus>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d011      	beq.n	8000a4e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <SPI3_IRQHandler+0x3c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d106      	bne.n	8000a40 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000a32:	f7ff ff5f 	bl	80008f4 <EVAL_AUDIO_GetSampleCallBack>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2004      	movs	r0, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f001 faec 	bl	8002018 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000a40:	f7ff ff58 	bl	80008f4 <EVAL_AUDIO_GetSampleCallBack>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4802      	ldr	r0, [pc, #8]	; (8000a50 <SPI3_IRQHandler+0x38>)
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f000 ff01 	bl	8001850 <SPI_I2S_SendData>
  }
}
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40003c00 	.word	0x40003c00
 8000a54:	20000004 	.word	0x20000004

08000a58 <TM_MPU6050_Init>:
	//mpu6050_writeByte(self, MPU6050_RA_XA_OFFS_L_TC, buf[1]);
	TM_I2C_Write(MPU6050_I2C, self->Address, MPU6050_RA_ZA_OFFS_H, buf[0]);
	TM_I2C_Write(MPU6050_I2C, self->Address, MPU6050_RA_ZA_OFFS_L_TC,buf[1]);

}
TM_MPU6050_Result_t TM_MPU6050_Init(TM_MPU6050_t* DataStruct, TM_MPU6050_Device_t DeviceNumber, TM_MPU6050_Accelerometer_t AccelerometerSensitivity, TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	70f9      	strb	r1, [r7, #3]
 8000a62:	70ba      	strb	r2, [r7, #2]
 8000a64:	707b      	strb	r3, [r7, #1]
	uint8_t temp;
	int16_t offX,offY,offZ;
	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	701a      	strb	r2, [r3, #0]
	
	/* Initialize I2C */
	TM_I2C_Init(MPU6050_I2C, MPU6050_I2C_PINSPACK, MPU6050_I2C_CLOCK);
 8000a72:	4850      	ldr	r0, [pc, #320]	; (8000bb4 <TM_MPU6050_Init+0x15c>)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4a50      	ldr	r2, [pc, #320]	; (8000bb8 <TM_MPU6050_Init+0x160>)
 8000a78:	f000 f90a 	bl	8000c90 <TM_I2C_Init>
	
	/* Check if device is connected */
	if (!TM_I2C_IsDeviceConnected(MPU6050_I2C, DataStruct->Address)) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	484c      	ldr	r0, [pc, #304]	; (8000bb4 <TM_MPU6050_Init+0x15c>)
 8000a82:	4619      	mov	r1, r3
 8000a84:	f000 fb68 	bl	8001158 <TM_I2C_IsDeviceConnected>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <TM_MPU6050_Init+0x3a>
		/* Return error */
		return TM_MPU6050_Result_DeviceNotConnected;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e08b      	b.n	8000baa <TM_MPU6050_Init+0x152>
	}
	
	/* Check who I am */
	if (TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_WHO_AM_I) != MPU6050_I_AM) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4847      	ldr	r0, [pc, #284]	; (8000bb4 <TM_MPU6050_Init+0x15c>)
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2275      	movs	r2, #117	; 0x75
 8000a9c:	f000 f994 	bl	8000dc8 <TM_I2C_Read>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b68      	cmp	r3, #104	; 0x68
 8000aa4:	d001      	beq.n	8000aaa <TM_MPU6050_Init+0x52>
		/* Return error */
		return TM_MPU6050_Result_DeviceInvalid;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	e07f      	b.n	8000baa <TM_MPU6050_Init+0x152>
	}
	
	/* Wakeup MPU6050 */
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_PWR_MGMT_1, 0x00);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4841      	ldr	r0, [pc, #260]	; (8000bb4 <TM_MPU6050_Init+0x15c>)
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	226b      	movs	r2, #107	; 0x6b
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f000 f9ef 	bl	8000e98 <TM_I2C_Write>
	
	/* Config accelerometer */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	483d      	ldr	r0, [pc, #244]	; (8000bb4 <TM_MPU6050_Init+0x15c>)
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	221c      	movs	r2, #28
 8000ac4:	f000 f980 	bl	8000dc8 <TM_I2C_Read>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	f023 0318 	bic.w	r3, r3, #24
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	78bb      	ldrb	r3, [r7, #2]
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, temp);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	4833      	ldr	r0, [pc, #204]	; (8000bb4 <TM_MPU6050_Init+0x15c>)
 8000ae8:	4611      	mov	r1, r2
 8000aea:	221c      	movs	r2, #28
 8000aec:	f000 f9d4 	bl	8000e98 <TM_I2C_Write>
	
	/* Config gyroscope */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	482f      	ldr	r0, [pc, #188]	; (8000bb4 <TM_MPU6050_Init+0x15c>)
 8000af6:	4619      	mov	r1, r3
 8000af8:	221b      	movs	r2, #27
 8000afa:	f000 f965 	bl	8000dc8 <TM_I2C_Read>
 8000afe:	4603      	mov	r3, r0
 8000b00:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	f023 0318 	bic.w	r3, r3, #24
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	787b      	ldrb	r3, [r7, #1]
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, temp);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	4825      	ldr	r0, [pc, #148]	; (8000bb4 <TM_MPU6050_Init+0x15c>)
 8000b1e:	4611      	mov	r1, r2
 8000b20:	221b      	movs	r2, #27
 8000b22:	f000 f9b9 	bl	8000e98 <TM_I2C_Write>
	
	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8000b26:	78bb      	ldrb	r3, [r7, #2]
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d81e      	bhi.n	8000b6a <TM_MPU6050_Init+0x112>
 8000b2c:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <TM_MPU6050_Init+0xdc>)
 8000b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b32:	bf00      	nop
 8000b34:	08000b45 	.word	0x08000b45
 8000b38:	08000b4f 	.word	0x08000b4f
 8000b3c:	08000b59 	.word	0x08000b59
 8000b40:	08000b63 	.word	0x08000b63
		case TM_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2; 
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8000b4a:	609a      	str	r2, [r3, #8]
			break;
 8000b4c:	e00e      	b.n	8000b6c <TM_MPU6050_Init+0x114>
		case TM_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4; 
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8000b54:	609a      	str	r2, [r3, #8]
			break;
 8000b56:	e009      	b.n	8000b6c <TM_MPU6050_Init+0x114>
		case TM_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8; 
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8000b5e:	609a      	str	r2, [r3, #8]
			break;
 8000b60:	e004      	b.n	8000b6c <TM_MPU6050_Init+0x114>
		case TM_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16; 
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8000b68:	609a      	str	r2, [r3, #8]
		default:
			break;
 8000b6a:	bf00      	nop
	}
	
	switch (GyroscopeSensitivity) {
 8000b6c:	787b      	ldrb	r3, [r7, #1]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d819      	bhi.n	8000ba6 <TM_MPU6050_Init+0x14e>
 8000b72:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <TM_MPU6050_Init+0x120>)
 8000b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b78:	08000b89 	.word	0x08000b89
 8000b7c:	08000b91 	.word	0x08000b91
 8000b80:	08000b99 	.word	0x08000b99
 8000b84:	08000ba1 	.word	0x08000ba1
		case TM_MPU6050_Gyroscope_250s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250; 
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <TM_MPU6050_Init+0x164>)
 8000b8c:	605a      	str	r2, [r3, #4]
			break;
 8000b8e:	e00b      	b.n	8000ba8 <TM_MPU6050_Init+0x150>
		case TM_MPU6050_Gyroscope_500s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500; 
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <TM_MPU6050_Init+0x168>)
 8000b94:	605a      	str	r2, [r3, #4]
			break;
 8000b96:	e007      	b.n	8000ba8 <TM_MPU6050_Init+0x150>
		case TM_MPU6050_Gyroscope_1000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000; 
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <TM_MPU6050_Init+0x16c>)
 8000b9c:	605a      	str	r2, [r3, #4]
			break;
 8000b9e:	e003      	b.n	8000ba8 <TM_MPU6050_Init+0x150>
		case TM_MPU6050_Gyroscope_2000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000; 
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <TM_MPU6050_Init+0x170>)
 8000ba4:	605a      	str	r2, [r3, #4]
		default:
			break;
 8000ba6:	bf00      	nop
//	_mpu6050_setYAccOffset(DataStruct,offY);
//	offZ = _mpu6050_getZAccOffset(DataStruct);
//	_mpu6050_setZAccOffset(DataStruct,offZ);

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40005c00 	.word	0x40005c00
 8000bb8:	00061a80 	.word	0x00061a80
 8000bbc:	3bfa232d 	.word	0x3bfa232d
 8000bc0:	3c7a232d 	.word	0x3c7a232d
 8000bc4:	3cf9c190 	.word	0x3cf9c190
 8000bc8:	3d79c190 	.word	0x3d79c190

08000bcc <TM_MPU6050_ReadAll>:
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
}

TM_MPU6050_Result_t TM_MPU6050_ReadAll(TM_MPU6050_t* DataStruct) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	int16_t temp;
	
	/* Read full raw data, 14bytes */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_XOUT_H, data, 14);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	210e      	movs	r1, #14
 8000bde:	9100      	str	r1, [sp, #0]
 8000be0:	4828      	ldr	r0, [pc, #160]	; (8000c84 <TM_MPU6050_ReadAll+0xb8>)
 8000be2:	4611      	mov	r1, r2
 8000be4:	223b      	movs	r2, #59	; 0x3b
 8000be6:	f000 f917 	bl	8000e18 <TM_I2C_ReadMulti>
	
	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);	
 8000bea:	7a3b      	ldrb	r3, [r7, #8]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	7a7b      	ldrb	r3, [r7, #9]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8000bfa:	7abb      	ldrb	r3, [r7, #10]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8000c0a:	7b3b      	ldrb	r3, [r7, #12]
 8000c0c:	021b      	lsls	r3, r3, #8
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	7b7b      	ldrb	r3, [r7, #13]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8000c1a:	7bbb      	ldrb	r3, [r7, #14]
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	82fb      	strh	r3, [r7, #22]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8000c26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c32:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000c88 <TM_MPU6050_ReadAll+0xbc>
 8000c36:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8000c3a:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000c8c <TM_MPU6050_ReadAll+0xc0>
 8000c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	edc3 7a06 	vstr	s15, [r3, #24]
	
	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 8000c48:	7c3b      	ldrb	r3, [r7, #16]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	7c7b      	ldrb	r3, [r7, #17]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 8000c58:	7cbb      	ldrb	r3, [r7, #18]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	7cfb      	ldrb	r3, [r7, #19]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 8000c68:	7d3b      	ldrb	r3, [r7, #20]
 8000c6a:	021b      	lsls	r3, r3, #8
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	7d7b      	ldrb	r3, [r7, #21]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40005c00 	.word	0x40005c00
 8000c88:	43aa0000 	.word	0x43aa0000
 8000c8c:	42121eb8 	.word	0x42121eb8

08000c90 <TM_I2C_Init>:
/* Private functions */
void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack);
void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack);
void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack);

void TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	72fb      	strb	r3, [r7, #11]
	I2C_InitTypeDef I2C_InitStruct;
	
	if (I2Cx == I2C1) {
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <TM_I2C_Init+0x124>)
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d121      	bne.n	8000cea <TM_I2C_Init+0x5a>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000ca6:	4b44      	ldr	r3, [pc, #272]	; (8000db8 <TM_I2C_Init+0x128>)
 8000ca8:	4a43      	ldr	r2, [pc, #268]	; (8000db8 <TM_I2C_Init+0x128>)
 8000caa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000cac:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 8000cb2:	7afb      	ldrb	r3, [r7, #11]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fa77 	bl	80011a8 <TM_I2C1_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[0]) {
 8000cba:	4b40      	ldr	r3, [pc, #256]	; (8000dbc <TM_I2C_Init+0x12c>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d902      	bls.n	8000cca <TM_I2C_Init+0x3a>
			TM_I2C_INT_Clocks[0] = clockSpeed;
 8000cc4:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <TM_I2C_Init+0x12c>)
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[0];
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <TM_I2C_Init+0x12c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C1_ACKNOWLEDGED_ADDRESS;
 8000cd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cd4:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C1_MODE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C1_OWN_ADDRESS;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C1_ACK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C1_DUTY_CYCLE;
 8000ce2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000ce6:	82fb      	strh	r3, [r7, #22]
 8000ce8:	e04a      	b.n	8000d80 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C2) {
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <TM_I2C_Init+0x130>)
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d121      	bne.n	8000d36 <TM_I2C_Init+0xa6>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <TM_I2C_Init+0x128>)
 8000cf4:	4a30      	ldr	r2, [pc, #192]	; (8000db8 <TM_I2C_Init+0x128>)
 8000cf6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000cf8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fa8d 	bl	8001220 <TM_I2C2_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[1]) {
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <TM_I2C_Init+0x12c>)
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d902      	bls.n	8000d16 <TM_I2C_Init+0x86>
			TM_I2C_INT_Clocks[1] = clockSpeed;
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <TM_I2C_Init+0x12c>)
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	605a      	str	r2, [r3, #4]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[1];
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <TM_I2C_Init+0x12c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C2_ACKNOWLEDGED_ADDRESS;
 8000d1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d20:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C2_MODE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C2_OWN_ADDRESS;
 8000d26:	2300      	movs	r3, #0
 8000d28:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C2_ACK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C2_DUTY_CYCLE;
 8000d2e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000d32:	82fb      	strh	r3, [r7, #22]
 8000d34:	e024      	b.n	8000d80 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C3) {
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <TM_I2C_Init+0x134>)
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d120      	bne.n	8000d80 <TM_I2C_Init+0xf0>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <TM_I2C_Init+0x128>)
 8000d40:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <TM_I2C_Init+0x128>)
 8000d42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d48:	641a      	str	r2, [r3, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 faa7 	bl	80012a0 <TM_I2C3_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[2]) {
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <TM_I2C_Init+0x12c>)
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d902      	bls.n	8000d62 <TM_I2C_Init+0xd2>
			TM_I2C_INT_Clocks[2] = clockSpeed;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <TM_I2C_Init+0x12c>)
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	609a      	str	r2, [r3, #8]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[2];
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <TM_I2C_Init+0x12c>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C3_ACKNOWLEDGED_ADDRESS;
 8000d68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d6c:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C3_MODE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C3_OWN_ADDRESS;
 8000d72:	2300      	movs	r3, #0
 8000d74:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C3_ACK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C3_DUTY_CYCLE;
 8000d7a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000d7e:	82fb      	strh	r3, [r7, #22]
	}
	
	/* Disable I2C first */
	I2Cx->CR1 &= ~I2C_CR1_PE;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	f023 0301 	bic.w	r3, r3, #1
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	801a      	strh	r2, [r3, #0]
	
	/* Initialize I2C */
	I2C_Init(I2Cx, &I2C_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	4619      	mov	r1, r3
 8000d98:	f000 fe6a 	bl	8001a70 <I2C_Init>
	
	/* Enable I2C */
	I2Cx->CR1 |= I2C_CR1_PE;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	801a      	strh	r2, [r3, #0]
}
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	20000010 	.word	0x20000010
 8000dc0:	40005800 	.word	0x40005800
 8000dc4:	40005c00 	.word	0x40005c00

08000dc8 <TM_I2C_Read>:

uint8_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	70fa      	strb	r2, [r7, #3]
 8000dd6:	70bb      	strb	r3, [r7, #2]
	uint8_t received_data;
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2200      	movs	r2, #0
 8000de0:	2300      	movs	r3, #0
 8000de2:	f000 f877 	bl	8000ed4 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8000de6:	78bb      	ldrb	r3, [r7, #2]
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	4619      	mov	r1, r3
 8000dec:	f000 f8f2 	bl	8000fd4 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 f97d 	bl	80010f0 <TM_I2C_Stop>
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_DISABLE);
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f000 f868 	bl	8000ed4 <TM_I2C_Start>
	received_data = TM_I2C_ReadNack(I2Cx);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f93b 	bl	8001080 <TM_I2C_ReadNack>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	73fb      	strb	r3, [r7, #15]
	return received_data;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <TM_I2C_ReadMulti>:


void TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	72fb      	strb	r3, [r7, #11]
 8000e26:	4613      	mov	r3, r2
 8000e28:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
 8000e2a:	7afb      	ldrb	r3, [r7, #11]
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2200      	movs	r2, #0
 8000e32:	2301      	movs	r3, #1
 8000e34:	f000 f84e 	bl	8000ed4 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8000e38:	7abb      	ldrb	r3, [r7, #10]
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f000 f8c9 	bl	8000fd4 <TM_I2C_WriteData>
	//TM_I2C_Stop(I2Cx);
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	68f8      	ldr	r0, [r7, #12]
 8000e46:	4619      	mov	r1, r3
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	f000 f842 	bl	8000ed4 <TM_I2C_Start>
	for (i = 0; i < count; i++) {
 8000e50:	2300      	movs	r3, #0
 8000e52:	75fb      	strb	r3, [r7, #23]
 8000e54:	e018      	b.n	8000e88 <TM_I2C_ReadMulti+0x70>
		if (i == (count - 1)) {
 8000e56:	7dfa      	ldrb	r2, [r7, #23]
 8000e58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d108      	bne.n	8000e72 <TM_I2C_ReadMulti+0x5a>
			/* Last byte */
			data[i] = TM_I2C_ReadNack(I2Cx);
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	18d4      	adds	r4, r2, r3
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f000 f90a 	bl	8001080 <TM_I2C_ReadNack>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	7023      	strb	r3, [r4, #0]
 8000e70:	e007      	b.n	8000e82 <TM_I2C_ReadMulti+0x6a>
		} else {
			data[i] = TM_I2C_ReadAck(I2Cx);
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	18d4      	adds	r4, r2, r3
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f000 f8d1 	bl	8001020 <TM_I2C_ReadAck>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	7023      	strb	r3, [r4, #0]
	uint8_t i;
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
	TM_I2C_WriteData(I2Cx, reg);
	//TM_I2C_Stop(I2Cx);
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
	for (i = 0; i < count; i++) {
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
 8000e84:	3301      	adds	r3, #1
 8000e86:	75fb      	strb	r3, [r7, #23]
 8000e88:	7dfb      	ldrb	r3, [r7, #23]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d8e1      	bhi.n	8000e56 <TM_I2C_ReadMulti+0x3e>
			data[i] = TM_I2C_ReadNack(I2Cx);
		} else {
			data[i] = TM_I2C_ReadAck(I2Cx);
		}
	}
}
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}

08000e98 <TM_I2C_Write>:
			data[i] = TM_I2C_ReadAck(I2Cx);
		}
	}
}

void TM_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	70f9      	strb	r1, [r7, #3]
 8000ea2:	70ba      	strb	r2, [r7, #2]
 8000ea4:	707b      	strb	r3, [r7, #1]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	2200      	movs	r2, #0
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f000 f810 	bl	8000ed4 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8000eb4:	78bb      	ldrb	r3, [r7, #2]
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f000 f88b 	bl	8000fd4 <TM_I2C_WriteData>
	TM_I2C_WriteData(I2Cx, data);
 8000ebe:	787b      	ldrb	r3, [r7, #1]
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f000 f886 	bl	8000fd4 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f911 	bl	80010f0 <TM_I2C_Stop>
}
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <TM_I2C_Start>:
	}
	TM_I2C_Stop(I2Cx);
}

/* Private functions */
int16_t TM_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	70f9      	strb	r1, [r7, #3]
 8000ede:	70ba      	strb	r2, [r7, #2]
 8000ee0:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	801a      	strh	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000ef2:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000ef4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ef8:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8000efa:	e00a      	b.n	8000f12 <TM_I2C_Start+0x3e>
		if (--TM_I2C_Timeout == 0x00) {
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <TM_I2C_Start+0x3e>
			return 1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e056      	b.n	8000fc0 <TM_I2C_Start+0xec>
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	8a9b      	ldrh	r3, [r3, #20]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0ed      	beq.n	8000efc <TM_I2C_Start+0x28>
			return 1;
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 8000f20:	787b      	ldrb	r3, [r7, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <TM_I2C_Start+0x62>
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	801a      	strh	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 8000f36:	78bb      	ldrb	r3, [r7, #2]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d11d      	bne.n	8000f78 <TM_I2C_Start+0xa4>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000f4c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f50:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8000f52:	e00a      	b.n	8000f6a <TM_I2C_Start+0x96>
			if (--TM_I2C_Timeout == 0x00) {
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	1e5a      	subs	r2, r3, #1
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <TM_I2C_Start+0x96>
				return 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e02a      	b.n	8000fc0 <TM_I2C_Start+0xec>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	8a9b      	ldrh	r3, [r3, #20]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0ed      	beq.n	8000f54 <TM_I2C_Start+0x80>
			if (--TM_I2C_Timeout == 0x00) {
				return 1;
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 8000f78:	78bb      	ldrb	r3, [r7, #2]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d11d      	bne.n	8000fba <TM_I2C_Start+0xe6>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 8000f7e:	78fb      	ldrb	r3, [r7, #3]
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000f8e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f92:	601a      	str	r2, [r3, #0]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8000f94:	e00a      	b.n	8000fac <TM_I2C_Start+0xd8>
			if (--TM_I2C_Timeout == 0x00) {
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1e5a      	subs	r2, r3, #1
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <TM_I2C_Start+0xf8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <TM_I2C_Start+0xd8>
				return 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e009      	b.n	8000fc0 <TM_I2C_Start+0xec>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <TM_I2C_Start+0xfc>)
 8000fb0:	f000 fe20 	bl	8001bf4 <I2C_CheckEvent>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0ed      	beq.n	8000f96 <TM_I2C_Start+0xc2>
			}
		}
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	8b1b      	ldrh	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	b21b      	sxth	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000004c 	.word	0x2000004c
 8000fd0:	00030002 	.word	0x00030002

08000fd4 <TM_I2C_WriteData>:

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <TM_I2C_WriteData+0x48>)
 8000fe2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fe6:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8000fe8:	e004      	b.n	8000ff4 <TM_I2C_WriteData+0x20>
		TM_I2C_Timeout--;
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <TM_I2C_WriteData+0x48>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <TM_I2C_WriteData+0x48>)
 8000ff2:	601a      	str	r2, [r3, #0]
}

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	8a9b      	ldrh	r3, [r3, #20]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d103      	bne.n	800100a <TM_I2C_WriteData+0x36>
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <TM_I2C_WriteData+0x48>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1ef      	bne.n	8000fea <TM_I2C_WriteData+0x16>
		TM_I2C_Timeout--;
	}
	
	/* Send I2C data */
	I2Cx->DR = data;
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	b29a      	uxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	821a      	strh	r2, [r3, #16]
}
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	2000004c 	.word	0x2000004c

08001020 <TM_I2C_ReadAck>:

uint8_t TM_I2C_ReadAck(I2C_TypeDef* I2Cx) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	b29a      	uxth	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	801a      	strh	r2, [r3, #0]
	
	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <TM_I2C_ReadAck+0x58>)
 800103a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800103e:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001040:	e00a      	b.n	8001058 <TM_I2C_ReadAck+0x38>
		if (--TM_I2C_Timeout == 0x00) {
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <TM_I2C_ReadAck+0x58>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <TM_I2C_ReadAck+0x58>)
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <TM_I2C_ReadAck+0x58>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <TM_I2C_ReadAck+0x38>
			return 1;
 8001054:	2301      	movs	r3, #1
 8001056:	e00b      	b.n	8001070 <TM_I2C_ReadAck+0x50>
	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
	
	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <TM_I2C_ReadAck+0x5c>)
 800105c:	f000 fdca 	bl	8001bf4 <I2C_CheckEvent>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0ed      	beq.n	8001042 <TM_I2C_ReadAck+0x22>
			return 1;
		}
	}
	
	/* Read data */
	data = I2Cx->DR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8a1b      	ldrh	r3, [r3, #16]
 800106a:	b29b      	uxth	r3, r3
 800106c:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000004c 	.word	0x2000004c
 800107c:	00030040 	.word	0x00030040

08001080 <TM_I2C_ReadNack>:

uint8_t TM_I2C_ReadNack(I2C_TypeDef* I2Cx) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Disable ACK */
	I2Cx->CR1 &= ~I2C_CR1_ACK;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001092:	b29a      	uxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	801a      	strh	r2, [r3, #0]
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	b29b      	uxth	r3, r3
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	801a      	strh	r2, [r3, #0]
	
	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <TM_I2C_ReadNack+0x68>)
 80010aa:	f644 6220 	movw	r2, #20000	; 0x4e20
 80010ae:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 80010b0:	e00a      	b.n	80010c8 <TM_I2C_ReadNack+0x48>
		if (--TM_I2C_Timeout == 0x00) {
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <TM_I2C_ReadNack+0x68>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	1e5a      	subs	r2, r3, #1
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <TM_I2C_ReadNack+0x68>)
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <TM_I2C_ReadNack+0x68>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <TM_I2C_ReadNack+0x48>
			return 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e00b      	b.n	80010e0 <TM_I2C_ReadNack+0x60>
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
	
	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <TM_I2C_ReadNack+0x6c>)
 80010cc:	f000 fd92 	bl	8001bf4 <I2C_CheckEvent>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0ed      	beq.n	80010b2 <TM_I2C_ReadNack+0x32>
			return 1;
		}
	}

	/* Read data */
	data = I2Cx->DR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	8a1b      	ldrh	r3, [r3, #16]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000004c 	.word	0x2000004c
 80010ec:	00030040 	.word	0x00030040

080010f0 <TM_I2C_Stop>:

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <TM_I2C_Stop+0x64>)
 80010fa:	f644 6220 	movw	r2, #20000	; 0x4e20
 80010fe:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001100:	e00a      	b.n	8001118 <TM_I2C_Stop+0x28>
		if (--TM_I2C_Timeout == 0x00) {
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <TM_I2C_Stop+0x64>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1e5a      	subs	r2, r3, #1
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <TM_I2C_Stop+0x64>)
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <TM_I2C_Stop+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <TM_I2C_Stop+0x28>
			return 1;
 8001114:	2301      	movs	r3, #1
 8001116:	e016      	b.n	8001146 <TM_I2C_Stop+0x56>
}

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	8a9b      	ldrh	r3, [r3, #20]
 800111c:	b29b      	uxth	r3, r3
 800111e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0ed      	beq.n	8001102 <TM_I2C_Stop+0x12>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	8a9b      	ldrh	r3, [r3, #20]
 800112a:	b29b      	uxth	r3, r3
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0e6      	beq.n	8001102 <TM_I2C_Stop+0x12>
			return 1;
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	b29b      	uxth	r3, r3
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	801a      	strh	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2000004c 	.word	0x2000004c

08001158 <TM_I2C_IsDeviceConnected>:

uint8_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4619      	mov	r1, r3
 800116e:	2200      	movs	r2, #0
 8001170:	2301      	movs	r3, #1
 8001172:	f7ff feaf 	bl	8000ed4 <TM_I2C_Start>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <TM_I2C_IsDeviceConnected+0x28>
		connected = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
	}
	
	/* STOP I2C */
	TM_I2C_Stop(I2Cx);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ffb5 	bl	80010f0 <TM_I2C_Stop>
	
	/* Return status */
	return connected;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <TM_I2C_InitCustomPinsCallback>:

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop

080011a8 <TM_I2C1_INT_InitPins>:

/* Private functions */
void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d109      	bne.n	80011cc <TM_I2C1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 80011b8:	2301      	movs	r3, #1
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2304      	movs	r3, #4
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	4815      	ldr	r0, [pc, #84]	; (8001218 <TM_I2C1_INT_InitPins+0x70>)
 80011c2:	21c0      	movs	r1, #192	; 0xc0
 80011c4:	2201      	movs	r2, #1
 80011c6:	2301      	movs	r3, #1
 80011c8:	f000 f8c4 	bl	8001354 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10a      	bne.n	80011e8 <TM_I2C1_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 80011d2:	2301      	movs	r3, #1
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <TM_I2C1_INT_InitPins+0x70>)
 80011dc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011e0:	2201      	movs	r2, #1
 80011e2:	2301      	movs	r3, #1
 80011e4:	f000 f8b6 	bl	8001354 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d10a      	bne.n	8001204 <TM_I2C1_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 80011ee:	2301      	movs	r3, #1
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2304      	movs	r3, #4
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <TM_I2C1_INT_InitPins+0x70>)
 80011f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80011fc:	2201      	movs	r2, #1
 80011fe:	2301      	movs	r3, #1
 8001200:	f000 f8a8 	bl	8001354 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d103      	bne.n	8001212 <TM_I2C1_INT_InitPins+0x6a>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1, GPIO_AF_I2C1);
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <TM_I2C1_INT_InitPins+0x74>)
 800120c:	2104      	movs	r1, #4
 800120e:	f7ff ffbf 	bl	8001190 <TM_I2C_InitCustomPinsCallback>
	}
}
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020400 	.word	0x40020400
 800121c:	40005400 	.word	0x40005400

08001220 <TM_I2C2_INT_InitPins>:

void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10a      	bne.n	8001246 <TM_I2C2_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8001230:	2301      	movs	r3, #1
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2304      	movs	r3, #4
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	4815      	ldr	r0, [pc, #84]	; (8001290 <TM_I2C2_INT_InitPins+0x70>)
 800123a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800123e:	2201      	movs	r2, #1
 8001240:	2301      	movs	r3, #1
 8001242:	f000 f887 	bl	8001354 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d109      	bne.n	8001260 <TM_I2C2_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 800124c:	2301      	movs	r3, #1
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2304      	movs	r3, #4
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	480f      	ldr	r0, [pc, #60]	; (8001294 <TM_I2C2_INT_InitPins+0x74>)
 8001256:	2103      	movs	r1, #3
 8001258:	2201      	movs	r2, #1
 800125a:	2301      	movs	r3, #1
 800125c:	f000 f87a 	bl	8001354 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d109      	bne.n	800127a <TM_I2C2_INT_InitPins+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8001266:	2301      	movs	r3, #1
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2304      	movs	r3, #4
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	480a      	ldr	r0, [pc, #40]	; (8001298 <TM_I2C2_INT_InitPins+0x78>)
 8001270:	2130      	movs	r1, #48	; 0x30
 8001272:	2201      	movs	r2, #1
 8001274:	2301      	movs	r3, #1
 8001276:	f000 f86d 	bl	8001354 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b03      	cmp	r3, #3
 800127e:	d103      	bne.n	8001288 <TM_I2C2_INT_InitPins+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2, GPIO_AF_I2C2);
 8001280:	4806      	ldr	r0, [pc, #24]	; (800129c <TM_I2C2_INT_InitPins+0x7c>)
 8001282:	2104      	movs	r1, #4
 8001284:	f7ff ff84 	bl	8001190 <TM_I2C_InitCustomPinsCallback>
	}
}
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020400 	.word	0x40020400
 8001294:	40021400 	.word	0x40021400
 8001298:	40021c00 	.word	0x40021c00
 800129c:	40005800 	.word	0x40005800

080012a0 <TM_I2C3_INT_InitPins>:

void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d115      	bne.n	80012dc <TM_I2C3_INT_InitPins+0x3c>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 80012b0:	2301      	movs	r3, #1
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2304      	movs	r3, #4
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	4814      	ldr	r0, [pc, #80]	; (800130c <TM_I2C3_INT_InitPins+0x6c>)
 80012ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012be:	2201      	movs	r2, #1
 80012c0:	2301      	movs	r3, #1
 80012c2:	f000 f847 	bl	8001354 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 80012c6:	2301      	movs	r3, #1
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2304      	movs	r3, #4
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	4810      	ldr	r0, [pc, #64]	; (8001310 <TM_I2C3_INT_InitPins+0x70>)
 80012d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d4:	2201      	movs	r2, #1
 80012d6:	2301      	movs	r3, #1
 80012d8:	f000 f83c 	bl	8001354 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d10a      	bne.n	80012f8 <TM_I2C3_INT_InitPins+0x58>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 80012e2:	2301      	movs	r3, #1
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2304      	movs	r3, #4
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	480a      	ldr	r0, [pc, #40]	; (8001314 <TM_I2C3_INT_InitPins+0x74>)
 80012ec:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80012f0:	2201      	movs	r2, #1
 80012f2:	2301      	movs	r3, #1
 80012f4:	f000 f82e 	bl	8001354 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d103      	bne.n	8001306 <TM_I2C3_INT_InitPins+0x66>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF_I2C3);
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <TM_I2C3_INT_InitPins+0x78>)
 8001300:	2104      	movs	r1, #4
 8001302:	f7ff ff45 	bl	8001190 <TM_I2C_InitCustomPinsCallback>
	}
}
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40020000 	.word	0x40020000
 8001310:	40020800 	.word	0x40020800
 8001314:	40021c00 	.word	0x40021c00
 8001318:	40005c00 	.word	0x40005c00

0800131c <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af02      	add	r7, sp, #8
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	8079      	strh	r1, [r7, #2]
 8001326:	707a      	strb	r2, [r7, #1]
 8001328:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d100      	bne.n	8001332 <TM_GPIO_Init+0x16>
		return;
 8001330:	e00c      	b.n	800134c <TM_GPIO_Init+0x30>
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f86c 	bl	8001410 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001338:	8879      	ldrh	r1, [r7, #2]
 800133a:	787a      	ldrb	r2, [r7, #1]
 800133c:	783b      	ldrb	r3, [r7, #0]
 800133e:	7c38      	ldrb	r0, [r7, #16]
 8001340:	9000      	str	r0, [sp, #0]
 8001342:	7d38      	ldrb	r0, [r7, #20]
 8001344:	9001      	str	r0, [sp, #4]
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f878 	bl	800143c <TM_GPIO_INT_Init>
}
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop

08001354 <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	8079      	strh	r1, [r7, #2]
 800135e:	707a      	strb	r2, [r7, #1]
 8001360:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d100      	bne.n	800136a <TM_GPIO_InitAlternate+0x16>
		return;
 8001368:	e03c      	b.n	80013e4 <TM_GPIO_InitAlternate+0x90>
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f850 	bl	8001410 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e028      	b.n	80013c8 <TM_GPIO_InitAlternate+0x74>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	fa42 f303 	asr.w	r3, r2, r3
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <TM_GPIO_InitAlternate+0x34>
			continue;
 8001386:	e01c      	b.n	80013c2 <TM_GPIO_InitAlternate+0x6e>
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	08d9      	lsrs	r1, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3108      	adds	r1, #8
 8001394:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	200f      	movs	r0, #15
 80013a2:	fa00 f303 	lsl.w	r3, r0, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4019      	ands	r1, r3
 80013aa:	7f38      	ldrb	r0, [r7, #28]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa00 f303 	lsl.w	r3, r0, r3
 80013b8:	4319      	orrs	r1, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3301      	adds	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	d9d3      	bls.n	8001376 <TM_GPIO_InitAlternate+0x22>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	7839      	ldrb	r1, [r7, #0]
 80013d4:	9100      	str	r1, [sp, #0]
 80013d6:	7e39      	ldrb	r1, [r7, #24]
 80013d8:	9101      	str	r1, [sp, #4]
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	4611      	mov	r1, r2
 80013de:	2202      	movs	r2, #2
 80013e0:	f000 f82c 	bl	800143c <TM_GPIO_INT_Init>
}
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop

080013ec <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80013fa:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80013fe:	0a9b      	lsrs	r3, r3, #10
 8001400:	b29b      	uxth	r3, r3
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8001418:	4c07      	ldr	r4, [pc, #28]	; (8001438 <TM_GPIO_INT_EnableClock+0x28>)
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <TM_GPIO_INT_EnableClock+0x28>)
 800141c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffe4 	bl	80013ec <TM_GPIO_GetPortSource>
 8001424:	4603      	mov	r3, r0
 8001426:	2201      	movs	r2, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	432b      	orrs	r3, r5
 800142e:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bdb0      	pop	{r4, r5, r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	8079      	strh	r1, [r7, #2]
 8001446:	707a      	strb	r2, [r7, #1]
 8001448:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffce 	bl	80013ec <TM_GPIO_GetPortSource>
 8001450:	4603      	mov	r3, r0
 8001452:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e066      	b.n	8001528 <TM_GPIO_INT_Init+0xec>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	fa42 f303 	asr.w	r3, r2, r3
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d100      	bne.n	800146c <TM_GPIO_INT_Init+0x30>
			continue;
 800146a:	e05a      	b.n	8001522 <TM_GPIO_INT_Init+0xe6>
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800146c:	7bba      	ldrb	r2, [r7, #14]
 800146e:	7bb9      	ldrb	r1, [r7, #14]
 8001470:	4b30      	ldr	r3, [pc, #192]	; (8001534 <TM_GPIO_INT_Init+0xf8>)
 8001472:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001476:	b299      	uxth	r1, r3
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2001      	movs	r0, #1
 800147c:	fa00 f303 	lsl.w	r3, r0, r3
 8001480:	b29b      	uxth	r3, r3
 8001482:	430b      	orrs	r3, r1
 8001484:	b29b      	uxth	r3, r3
 8001486:	b299      	uxth	r1, r3
 8001488:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <TM_GPIO_INT_Init+0xf8>)
 800148a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2103      	movs	r1, #3
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	401a      	ands	r2, r3
 80014a0:	7e39      	ldrb	r1, [r7, #24]
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2103      	movs	r1, #3
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	401a      	ands	r2, r3
 80014c2:	7879      	ldrb	r1, [r7, #1]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80014d2:	787b      	ldrb	r3, [r7, #1]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d002      	beq.n	80014de <TM_GPIO_INT_Init+0xa2>
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d121      	bne.n	8001522 <TM_GPIO_INT_Init+0xe6>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	7839      	ldrb	r1, [r7, #0]
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2103      	movs	r1, #3
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	7f39      	ldrb	r1, [r7, #28]
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	609a      	str	r2, [r3, #8]
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	3301      	adds	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b0f      	cmp	r3, #15
 800152c:	d995      	bls.n	800145a <TM_GPIO_INT_Init+0x1e>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000050 	.word	0x20000050

08001538 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	8a1b      	ldrh	r3, [r3, #16]
 8001556:	b29b      	uxth	r3, r3
 8001558:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001560:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	88db      	ldrh	r3, [r3, #6]
 8001566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001568:	4313      	orrs	r3, r2
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	899b      	ldrh	r3, [r3, #12]
 8001578:	b29b      	uxth	r3, r3
 800157a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001582:	f023 030c 	bic.w	r3, r3, #12
 8001586:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	889a      	ldrh	r2, [r3, #4]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	891b      	ldrh	r3, [r3, #8]
 8001590:	4313      	orrs	r3, r2
 8001592:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001598:	4313      	orrs	r3, r2
 800159a:	b29b      	uxth	r3, r3
 800159c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159e:	4313      	orrs	r3, r2
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	8a9b      	ldrh	r3, [r3, #20]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	899b      	ldrh	r3, [r3, #12]
 80015be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c0:	4313      	orrs	r3, r2
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f967 	bl	80018a4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <USART_Init+0x168>)
 80015da:	429a      	cmp	r2, r3
 80015dc:	d003      	beq.n	80015e6 <USART_Init+0xae>
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <USART_Init+0x16c>)
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d102      	bne.n	80015ec <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	623b      	str	r3, [r7, #32]
 80015ea:	e001      	b.n	80015f0 <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	899b      	ldrh	r3, [r3, #12]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da0c      	bge.n	8001618 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80015fe:	6a3a      	ldr	r2, [r7, #32]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	009a      	lsls	r2, r3, #2
 8001608:	441a      	add	r2, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fbb2 f3f3 	udiv	r3, r2, r3
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e00b      	b.n	8001630 <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001618:	6a3a      	ldr	r2, [r7, #32]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	009a      	lsls	r2, r3, #2
 8001622:	441a      	add	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <USART_Init+0x170>)
 8001634:	fba3 1302 	umull	r1, r3, r3, r2
 8001638:	095b      	lsrs	r3, r3, #5
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	2264      	movs	r2, #100	; 0x64
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	899b      	ldrh	r3, [r3, #12]
 8001652:	b29b      	uxth	r3, r3
 8001654:	b29b      	uxth	r3, r3
 8001656:	b21b      	sxth	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	da0d      	bge.n	8001678 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <USART_Init+0x170>)
 8001666:	fba3 1302 	umull	r1, r3, r3, r2
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001672:	4313      	orrs	r3, r2
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
 8001676:	e00c      	b.n	8001692 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <USART_Init+0x170>)
 8001682:	fba3 1302 	umull	r1, r3, r3, r2
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168e:	4313      	orrs	r3, r2
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	b29a      	uxth	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	811a      	strh	r2, [r3, #8]
}
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40011000 	.word	0x40011000
 80016a4:	40011400 	.word	0x40011400
 80016a8:	51eb851f 	.word	0x51eb851f

080016ac <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	899b      	ldrh	r3, [r3, #12]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	819a      	strh	r2, [r3, #12]
 80016ce:	e007      	b.n	80016e0 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	899b      	ldrh	r3, [r3, #12]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016da:	b29a      	uxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	819a      	strh	r2, [r3, #12]
  }
}
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop

080016ec <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016fe:	b29a      	uxth	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	809a      	strh	r2, [r3, #4]
}
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop

08001710 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	460a      	mov	r2, r1
 800171c:	807a      	strh	r2, [r7, #2]
 800171e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	095b      	lsrs	r3, r3, #5
 800173a:	b2db      	uxtb	r3, r3
 800173c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2201      	movs	r2, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d103      	bne.n	800175e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	330c      	adds	r3, #12
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e009      	b.n	8001772 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d103      	bne.n	800176c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3310      	adds	r3, #16
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e002      	b.n	8001772 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3314      	adds	r3, #20
 8001770:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001772:	787b      	ldrb	r3, [r7, #1]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	6811      	ldr	r1, [r2, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e006      	b.n	8001794 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	6811      	ldr	r1, [r2, #0]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	43d2      	mvns	r2, r2
 8001790:	400a      	ands	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
  }
}
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2201      	movs	r2, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d106      	bne.n	80017ec <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	899b      	ldrh	r3, [r3, #12]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4013      	ands	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e00f      	b.n	800180c <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d106      	bne.n	8001800 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	8a1b      	ldrh	r3, [r3, #16]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4013      	ands	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e005      	b.n	800180c <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	8a9b      	ldrh	r3, [r3, #20]
 8001804:	b29b      	uxth	r3, r3
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4013      	ands	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	b29b      	uxth	r3, r3
 8001812:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4013      	ands	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <USART_GetITStatus+0x9c>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8001836:	2301      	movs	r3, #1
 8001838:	74fb      	strb	r3, [r7, #19]
 800183a:	e001      	b.n	8001840 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001840:	7cfb      	ldrb	r3, [r7, #19]
}
 8001842:	4618      	mov	r0, r3
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	819a      	strh	r2, [r3, #12]
}
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	891b      	ldrh	r3, [r3, #8]
 8001880:	b29a      	uxth	r2, r3
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	4013      	ands	r3, r2
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	e001      	b.n	8001896 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	2302      	movs	r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	2302      	movs	r3, #2
 80018c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80018c4:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <RCC_GetClocksFreq+0x144>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d007      	beq.n	80018e4 <RCC_GetClocksFreq+0x40>
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d009      	beq.n	80018ec <RCC_GetClocksFreq+0x48>
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d13f      	bne.n	800195c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a43      	ldr	r2, [pc, #268]	; (80019ec <RCC_GetClocksFreq+0x148>)
 80018e0:	601a      	str	r2, [r3, #0]
      break;
 80018e2:	e03f      	b.n	8001964 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a42      	ldr	r2, [pc, #264]	; (80019f0 <RCC_GetClocksFreq+0x14c>)
 80018e8:	601a      	str	r2, [r3, #0]
      break;
 80018ea:	e03b      	b.n	8001964 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80018ec:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <RCC_GetClocksFreq+0x144>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f4:	0d9b      	lsrs	r3, r3, #22
 80018f6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f8:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <RCC_GetClocksFreq+0x144>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001900:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00d      	beq.n	8001924 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001908:	4a39      	ldr	r2, [pc, #228]	; (80019f0 <RCC_GetClocksFreq+0x14c>)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <RCC_GetClocksFreq+0x144>)
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001918:	400b      	ands	r3, r1
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	fb03 f302 	mul.w	r3, r3, r2
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e00c      	b.n	800193e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001924:	4a31      	ldr	r2, [pc, #196]	; (80019ec <RCC_GetClocksFreq+0x148>)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	fbb2 f2f3 	udiv	r2, r2, r3
 800192c:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <RCC_GetClocksFreq+0x144>)
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001934:	400b      	ands	r3, r1
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	fb03 f302 	mul.w	r3, r3, r2
 800193c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <RCC_GetClocksFreq+0x144>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001946:	0c1b      	lsrs	r3, r3, #16
 8001948:	3301      	adds	r3, #1
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	fbb2 f2f3 	udiv	r2, r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
      break;
 800195a:	e003      	b.n	8001964 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a23      	ldr	r2, [pc, #140]	; (80019ec <RCC_GetClocksFreq+0x148>)
 8001960:	601a      	str	r2, [r3, #0]
      break;
 8001962:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <RCC_GetClocksFreq+0x144>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001974:	4a1f      	ldr	r2, [pc, #124]	; (80019f4 <RCC_GetClocksFreq+0x150>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	40da      	lsrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <RCC_GetClocksFreq+0x144>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001994:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	0a9b      	lsrs	r3, r3, #10
 800199a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <RCC_GetClocksFreq+0x150>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4413      	add	r3, r2
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	40da      	lsrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <RCC_GetClocksFreq+0x144>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80019bc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	0b5b      	lsrs	r3, r3, #13
 80019c2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80019c4:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <RCC_GetClocksFreq+0x150>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4413      	add	r3, r2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	40da      	lsrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	60da      	str	r2, [r3, #12]
}
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	00f42400 	.word	0x00f42400
 80019f0:	007a1200 	.word	0x007a1200
 80019f4:	2000001c 	.word	0x2000001c

080019f8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d006      	beq.n	8001a18 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <RCC_AHB1PeriphClockCmd+0x38>)
 8001a0c:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <RCC_AHB1PeriphClockCmd+0x38>)
 8001a0e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
 8001a16:	e006      	b.n	8001a26 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <RCC_AHB1PeriphClockCmd+0x38>)
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <RCC_AHB1PeriphClockCmd+0x38>)
 8001a1c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	43d2      	mvns	r2, r2
 8001a22:	400a      	ands	r2, r1
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40023800 	.word	0x40023800

08001a34 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <RCC_APB2PeriphClockCmd+0x38>)
 8001a48:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <RCC_APB2PeriphClockCmd+0x38>)
 8001a4a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
 8001a52:	e006      	b.n	8001a62 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <RCC_APB2PeriphClockCmd+0x38>)
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <RCC_APB2PeriphClockCmd+0x38>)
 8001a58:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	43d2      	mvns	r2, r2
 8001a5e:	400a      	ands	r2, r1
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40023800 	.word	0x40023800

08001a70 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a7e:	2300      	movs	r3, #0
 8001a80:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8001a82:	2304      	movs	r3, #4
 8001a84:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8001a86:	4b57      	ldr	r3, [pc, #348]	; (8001be4 <I2C_Init+0x174>)
 8001a88:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	889b      	ldrh	r3, [r3, #4]
 8001a8e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001a90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a96:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff01 	bl	80018a4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <I2C_Init+0x178>)
 8001aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8001aae:	0c9b      	lsrs	r3, r3, #18
 8001ab0:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8001ab2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001abe:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b44      	ldr	r3, [pc, #272]	; (8001bec <I2C_Init+0x17c>)
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d815      	bhi.n	8001b0a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d801      	bhi.n	8001af6 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8001af2:	2304      	movs	r3, #4
 8001af4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001af6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001af8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001afa:	4313      	orrs	r3, r2
 8001afc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001afe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b00:	3301      	adds	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	841a      	strh	r2, [r3, #32]
 8001b08:	e040      	b.n	8001b8c <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	88da      	ldrh	r2, [r3, #6]
 8001b0e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d109      	bne.n	8001b2a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001b28:	e00e      	b.n	8001b48 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	009a      	lsls	r2, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b46:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001b5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b6a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001b6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <I2C_Init+0x180>)
 8001b78:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7c:	1192      	asrs	r2, r2, #6
 8001b7e:	17db      	asrs	r3, r3, #31
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b90:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001baa:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001bae:	f023 0302 	bic.w	r3, r3, #2
 8001bb2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	889a      	ldrh	r2, [r3, #4]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	895b      	ldrh	r3, [r3, #10]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001bca:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	899a      	ldrh	r2, [r3, #12]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	891b      	ldrh	r3, [r3, #8]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	811a      	strh	r2, [r3, #8]
}
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	007a1200 	.word	0x007a1200
 8001be8:	431bde83 	.word	0x431bde83
 8001bec:	000186a0 	.word	0x000186a0
 8001bf0:	10624dd3 	.word	0x10624dd3

08001bf4 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	8a9b      	ldrh	r3, [r3, #20]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8b1b      	ldrh	r3, [r3, #24]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c2e:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	401a      	ands	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d102      	bne.n	8001c42 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
 8001c40:	e001      	b.n	8001c46 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e076      	b.n	8001d5e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2201      	movs	r2, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d165      	bne.n	8001d58 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2103      	movs	r1, #3
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	791b      	ldrb	r3, [r3, #4]
 8001caa:	4619      	mov	r1, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	791b      	ldrb	r3, [r3, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d003      	beq.n	8001cca <GPIO_Init+0x76>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	791b      	ldrb	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d12e      	bne.n	8001d28 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2103      	movs	r1, #3
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	795b      	ldrb	r3, [r3, #5]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	401a      	ands	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	799b      	ldrb	r3, [r3, #6]
 8001d16:	4619      	mov	r1, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2103      	movs	r1, #3
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	79db      	ldrb	r3, [r3, #7]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d985      	bls.n	8001c70 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop

08001d70 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e001      	b.n	8001d96 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	460a      	mov	r2, r1
 8001db0:	807a      	strh	r2, [r7, #2]
 8001db2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001dbc:	787a      	ldrb	r2, [r7, #1]
 8001dbe:	887b      	ldrh	r3, [r7, #2]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	08db      	lsrs	r3, r3, #3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	08db      	lsrs	r3, r3, #3
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3108      	adds	r1, #8
 8001de0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	200f      	movs	r0, #15
 8001dee:	fa00 f303 	lsl.w	r3, r0, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	4019      	ands	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3208      	adds	r2, #8
 8001dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	08db      	lsrs	r3, r3, #3
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <DMA_Init+0xa8>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001e5a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001e66:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001e72:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001e7e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 0307 	bic.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60da      	str	r2, [r3, #12]
}
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	f01c803f 	.word	0xf01c803f

08001edc <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e005      	b.n	8001f08 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 0201 	bic.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	601a      	str	r2, [r3, #0]
  }
}
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e001      	b.n	8001f36 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <DMA_GetFlagStatus+0x6c>)
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d802      	bhi.n	8001f64 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <DMA_GetFlagStatus+0x70>)
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e001      	b.n	8001f68 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <DMA_GetFlagStatus+0x74>)
 8001f66:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e002      	b.n	8001f80 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001f86:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
 8001f9a:	e001      	b.n	8001fa0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	4002640f 	.word	0x4002640f
 8001fb4:	40026000 	.word	0x40026000
 8001fb8:	40026400 	.word	0x40026400

08001fbc <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4b10      	ldr	r3, [pc, #64]	; (800200c <DMA_ClearFlag+0x50>)
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d802      	bhi.n	8001fd4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <DMA_ClearFlag+0x54>)
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e001      	b.n	8001fd8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <DMA_ClearFlag+0x58>)
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001fe8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	60d3      	str	r3, [r2, #12]
 8001ff0:	e006      	b.n	8002000 <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001ff8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	6093      	str	r3, [r2, #8]
  }    
}
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	4002640f 	.word	0x4002640f
 8002010:	40026000 	.word	0x40026000
 8002014:	40026400 	.word	0x40026400

08002018 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <DAC_SetChannel1Data+0x30>)
 800202a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	3308      	adds	r3, #8
 8002034:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	887a      	ldrh	r2, [r7, #2]
 800203a:	601a      	str	r2, [r3, #0]
}
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40007400 	.word	0x40007400

0800204c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	2300      	movs	r3, #0
 800205a:	73bb      	strb	r3, [r7, #14]
 800205c:	230f      	movs	r3, #15
 800205e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	78db      	ldrb	r3, [r3, #3]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d037      	beq.n	80020d8 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <NVIC_Init+0xb4>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	f1c3 0304 	rsb	r3, r3, #4
 800207c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800207e:	7b7a      	ldrb	r2, [r7, #13]
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	fa42 f303 	asr.w	r3, r2, r3
 8002086:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	461a      	mov	r2, r3
 800208e:	7bbb      	ldrb	r3, [r7, #14]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	789a      	ldrb	r2, [r3, #2]
 800209a:	7b7b      	ldrb	r3, [r7, #13]
 800209c:	4013      	ands	r3, r2
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80020ac:	4a15      	ldr	r2, [pc, #84]	; (8002104 <NVIC_Init+0xb8>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <NVIC_Init+0xb8>)
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	0952      	lsrs	r2, r2, #5
 80020c2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	7809      	ldrb	r1, [r1, #0]
 80020c8:	f001 011f 	and.w	r1, r1, #31
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80020d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80020d6:	e00e      	b.n	80020f6 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <NVIC_Init+0xb8>)
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	7812      	ldrb	r2, [r2, #0]
 80020de:	0952      	lsrs	r2, r2, #5
 80020e0:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	7809      	ldrb	r1, [r1, #0]
 80020e6:	f001 011f 	and.w	r1, r1, #31
 80020ea:	2001      	movs	r0, #1
 80020ec:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80020f0:	3220      	adds	r2, #32
 80020f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00
 8002104:	e000e100 	.word	0xe000e100

08002108 <__libc_init_array>:
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <__libc_init_array+0x3c>)
 800210c:	4d0e      	ldr	r5, [pc, #56]	; (8002148 <__libc_init_array+0x40>)
 800210e:	1aed      	subs	r5, r5, r3
 8002110:	10ad      	asrs	r5, r5, #2
 8002112:	2400      	movs	r4, #0
 8002114:	461e      	mov	r6, r3
 8002116:	42ac      	cmp	r4, r5
 8002118:	d004      	beq.n	8002124 <__libc_init_array+0x1c>
 800211a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800211e:	4790      	blx	r2
 8002120:	3401      	adds	r4, #1
 8002122:	e7f8      	b.n	8002116 <__libc_init_array+0xe>
 8002124:	f000 f816 	bl	8002154 <_init>
 8002128:	4d08      	ldr	r5, [pc, #32]	; (800214c <__libc_init_array+0x44>)
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <__libc_init_array+0x48>)
 800212c:	1aed      	subs	r5, r5, r3
 800212e:	10ad      	asrs	r5, r5, #2
 8002130:	2400      	movs	r4, #0
 8002132:	461e      	mov	r6, r3
 8002134:	42ac      	cmp	r4, r5
 8002136:	d004      	beq.n	8002142 <__libc_init_array+0x3a>
 8002138:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800213c:	4790      	blx	r2
 800213e:	3401      	adds	r4, #1
 8002140:	e7f8      	b.n	8002134 <__libc_init_array+0x2c>
 8002142:	bd70      	pop	{r4, r5, r6, pc}
 8002144:	08002188 	.word	0x08002188
 8002148:	08002188 	.word	0x08002188
 800214c:	0800218c 	.word	0x0800218c
 8002150:	08002188 	.word	0x08002188

08002154 <_init>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	bf00      	nop
 8002158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215a:	bc08      	pop	{r3}
 800215c:	469e      	mov	lr, r3
 800215e:	4770      	bx	lr

08002160 <_fini>:
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	bf00      	nop
 8002164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002166:	bc08      	pop	{r3}
 8002168:	469e      	mov	lr, r3
 800216a:	4770      	bx	lr
